version: '3.8'

services:
  # MySQL Database
  mysql:
    image: mysql:8.0
    container_name: absensi_mysql_prod
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: absensi_db
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      MYSQL_CHARSET: utf8mb4
      MYSQL_COLLATION: utf8mb4_unicode_ci
    # Remove public port exposure for security
    volumes:
      - mysql_data_prod:/var/lib/mysql
      - ./mysql/init:/docker-entrypoint-initdb.d
      - ./mysql/conf.d:/etc/mysql/conf.d:ro
    networks:
      - absensi_network_prod
    command:
      - --default-authentication-plugin=mysql_native_password
      - --character-set-server=utf8mb4
      - --collation-server=utf8mb4_unicode_ci
      - --innodb-buffer-pool-size=1G
      - --max-connections=200
      # - --query-cache-size=256M
      # - --query-cache-type=1
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${MYSQL_ROOT_PASSWORD}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # phpMyAdmin (Optional for production)
  phpmyadmin:
    image: phpmyadmin/phpmyadmin:latest
    container_name: absensi_phpmyadmin_prod
    restart: unless-stopped
    environment:
      PMA_HOST: mysql
      PMA_PORT: 3306
      PMA_USER: root
      PMA_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
    ports:
      - "8080:80"
    depends_on:
      - mysql
    networks:
      - absensi_network_prod
    profiles:
      - admin

  # Backend DRF (Production)
  backend:
    build:
      context: ./drf
      dockerfile: Dockerfile
    container_name: absensi_backend_prod
    restart: unless-stopped
    environment:
      - DJANGO_DEBUG=0
      - DJANGO_SECRET_KEY=${SECRET_KEY}
      - DJANGO_ALLOWED_HOSTS=${DJANGO_ALLOWED_HOSTS}
      - MYSQL_HOST=mysql
      - MYSQL_PORT=3306
      - MYSQL_DATABASE=absensi_db
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      - CORS_ALLOWED_ORIGINS=${BACKEND_CORS_ORIGINS}
      - DJANGO_SETTINGS_MODULE=core.settings
    # Remove public port exposure for security (will be accessed via Caddy)
    depends_on:
      mysql:
        condition: service_healthy
    networks:
      - absensi_network_prod
    volumes:
      - ./logs/backend:/app/logs
      - ./drf/app:/app
      - ./drf/app/media:/app/media
      - ./drf/app/template:/app/template
      - ./drf/app/staticfiles:/app/staticfiles
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:8000/api/v2/core/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend Next.js (Production)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
    container_name: absensi_frontend_prod
    restart: unless-stopped
    environment:
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}
      - NEXT_PUBLIC_BACKEND_URL=${NEXT_PUBLIC_BACKEND_URL}
      - NODE_ENV=production
    # Remove public port exposure for security (will be accessed via Caddy)
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - absensi_network_prod
    volumes:
      - ./logs/frontend:/app/logs
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000', (res) => { if (res.statusCode >= 200 && res.statusCode < 400) process.exit(0); else process.exit(1); }).on('error', () => process.exit(1))"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Reverse proxy with automatic HTTPS (Let's Encrypt) for production
  caddy:
    image: caddy:2
    container_name: absensi_caddy_prod
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    environment:
      - FRONTEND_DOMAIN=${FRONTEND_DOMAIN}
      - API_DOMAIN=${API_DOMAIN}
    volumes:
      - ./Caddyfile.prod:/etc/caddy/Caddyfile:ro
      - caddy_data_prod:/data
      - caddy_config_prod:/config
      - ./logs/caddy:/var/log/caddy
    depends_on:
      frontend:
        condition: service_healthy
      backend:
        condition: service_healthy
    networks:
      - absensi_network_prod
    healthcheck:
      test: ["CMD", "caddy", "version"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # Database Backup Service
  backup:
    image: alpine:latest
    container_name: absensi_backup_prod
    restart: unless-stopped
    environment:
      - MYSQL_HOST=mysql
      - MYSQL_USER=root
      - MYSQL_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_DATABASE=absensi_db
    volumes:
      - ./backups:/backups
      - mysql_data_prod:/var/lib/mysql:ro
    networks:
      - absensi_network_prod
    command: >
      sh -c "
        apk add --no-cache mysql-client gzip &&
        mkdir -p /backups &&
        while true; do
          TIMESTAMP=$(date +%Y%m%d_%H%M%S) &&
          mysqldump -h mysql -u root -p${MYSQL_ROOT_PASSWORD} absensi_db > /backups/backup_${TIMESTAMP}.sql &&
          gzip /backups/backup_${TIMESTAMP}.sql &&
          find /backups -name 'backup_*.sql.gz' -mtime +7 -delete &&
          sleep 86400
        done
      "
    profiles:
      - backup

  # DOCX to PDF Converter Service
  docx_converter:
    image: beladevos/docx-pdf-converter-libreoffice:latest
    platform: linux/amd64
    container_name: absensi_docx_converter_prod
    restart: unless-stopped
    # Remove public port exposure for security (will be accessed via Caddy)
    networks:
      - absensi_network_prod
    volumes:
      - ./drf/app/media:/app/media  # Mount media directory for file processing
      - ./template:/app/template   # Mount template directory if needed
    environment:
      - NODE_ENV=production
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:5000/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    depends_on:
      backend:
        condition: service_healthy

volumes:
  mysql_data_prod:
    driver: local
  caddy_data_prod:
    driver: local
  caddy_config_prod:
    driver: local

networks:
  absensi_network_prod:
    driver: bridge
