version: '3.8'

services:
  # MySQL Database for development
  mysql:
    image: mysql:8.0
    container_name: absensi_mysql_dev
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: rootpassword
      MYSQL_DATABASE: absensi_db
      MYSQL_USER: absensi_user
      MYSQL_PASSWORD: absensi_password
    ports:
      - "3306:3306"
    volumes:
      - mysql_data_dev:/var/lib/mysql
      - ./mysql/init:/docker-entrypoint-initdb.d
    networks:
      - absensi_network_dev
    command: --default-authentication-plugin=mysql_native_password
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${MYSQL_ROOT_PASSWORD}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # phpMyAdmin for development
  phpmyadmin:
    image: phpmyadmin/phpmyadmin:latest
    container_name: absensi_phpmyadmin_dev
    restart: unless-stopped
    environment:
      PMA_HOST: mysql
      PMA_PORT: 3306
      PMA_USER: root
      PMA_PASSWORD: rootpassword
      MYSQL_ROOT_PASSWORD: rootpassword
    ports:
      - "8080:80"
    depends_on:
      - mysql
    networks:
      - absensi_network_dev

  # Backend DRF for development
  backend:
    build:
      context: ./drf
      dockerfile: Dockerfile
    container_name: absensi_backend_dev
    restart: unless-stopped
    environment:
      - DJANGO_DEBUG=1
      - DJANGO_SECRET_KEY=dev-secret-key-change-in-production
      - DJANGO_ALLOWED_HOSTS=localhost,127.0.0.1,backend,host.docker.internal
      - MYSQL_HOST=mysql
      - MYSQL_PORT=3306
      - MYSQL_DATABASE=absensi_db
      - MYSQL_USER=absensi_user
      - MYSQL_PASSWORD=absensi_password
      - CORS_ORIGIN_FRONTEND=http://localhost:3000,http://frontend:3000
    ports:
      - "8000:8000"
    depends_on:
      mysql:
        condition: service_healthy
    networks:
      - absensi_network_dev
    volumes:
      - ./drf:/app
      - ./logs/dev/backend:/app/logs
    command: python manage.py runserver 0.0.0.0:8000
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend Next.js for development
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: absensi_frontend_dev
    restart: unless-stopped
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8000
      - NEXT_PUBLIC_BACKEND_URL=http://localhost:8000
      - NODE_ENV=development
    ports:
      - "3000:3000"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - absensi_network_dev
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - ./logs/dev/frontend:/app/logs
    command: npm run dev
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

volumes:
  mysql_data_dev:
    driver: local

networks:
  absensi_network_dev:
    driver: bridge