# Generated by Django 5.0.2 on 2025-09-04 07:26 - MERGED MIGRATION

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('api', '0040_phase2_default_templates'),
    ]

    operations = [
        migrations.RunSQL(
            # Add inherit_permissions column only if it doesn't exist
            """
            SET @column_exists = (
                SELECT COUNT(*)
                FROM information_schema.columns
                WHERE table_schema = DATABASE()
                AND table_name = 'api_role'
                AND column_name = 'inherit_permissions'
            );
            SET @sql = IF(@column_exists = 0,
                'ALTER TABLE api_role ADD COLUMN inherit_permissions tinyint(1) NOT NULL DEFAULT 1 COMMENT \"Whether to inherit permissions from parent role\"',
                'SELECT \"Column inherit_permissions already exists\"'
            );
            PREPARE stmt FROM @sql;
            EXECUTE stmt;
            DEALLOCATE PREPARE stmt;
            """,
            # Reverse: drop the column if it exists
            reverse_sql="ALTER TABLE api_role DROP COLUMN IF EXISTS inherit_permissions"
        ),
        migrations.RunSQL(
            # Add parent_role_id column only if it doesn't exist
            """
            SET @column_exists = (
                SELECT COUNT(*)
                FROM information_schema.columns
                WHERE table_schema = DATABASE()
                AND table_name = 'api_role'
                AND column_name = 'parent_role_id'
            );
            SET @sql = IF(@column_exists = 0,
                'ALTER TABLE api_role ADD COLUMN parent_role_id int NULL COMMENT \"Parent role for permission inheritance\"',
                'SELECT \"Column parent_role_id already exists\"'
            );
            PREPARE stmt FROM @sql;
            EXECUTE stmt;
            DEALLOCATE PREPARE stmt;
            """,
            # Reverse: drop the column if it exists
            reverse_sql="ALTER TABLE api_role DROP COLUMN IF EXISTS parent_role_id"
        ),
        migrations.RunSQL(
            # Add role_category column only if it doesn't exist
            """
            SET @column_exists = (
                SELECT COUNT(*)
                FROM information_schema.columns
                WHERE table_schema = DATABASE()
                AND table_name = 'api_role'
                AND column_name = 'role_category'
            );
            SET @sql = IF(@column_exists = 0,
                'ALTER TABLE api_role ADD COLUMN role_category varchar(20) NOT NULL DEFAULT \"employee\" COMMENT \"Category of the role for better organization\"',
                'SELECT \"Column role_category already exists\"'
            );
            PREPARE stmt FROM @sql;
            EXECUTE stmt;
            DEALLOCATE PREPARE stmt;
            """,
            # Reverse: drop the column if it exists
            reverse_sql="ALTER TABLE api_role DROP COLUMN IF EXISTS role_category"
        ),
        migrations.RunSQL(
            # Drop the old unique constraint that references group_id
            """
            SET @index_exists = (
                SELECT COUNT(*)
                FROM information_schema.statistics
                WHERE table_schema = DATABASE()
                AND table_name = 'api_employeerole'
                AND index_name = 'api_employeerole_employee_id_group_id_21bfa385_uniq'
            );
            SET @sql = IF(@index_exists > 0,
                'ALTER TABLE api_employeerole DROP INDEX api_employeerole_employee_id_group_id_21bfa385_uniq',
                'SELECT \"Index does not exist\"'
            );
            PREPARE stmt FROM @sql;
            EXECUTE stmt;
            DEALLOCATE PREPARE stmt;
            """,
            # Reverse: do nothing since we're dropping an old index
            reverse_sql="SELECT 'Reverse migration not needed'"
        ),
        migrations.RunSQL(
            # Add the unique constraint only if it doesn't exist
            """
            SET @constraint_exists = (
                SELECT COUNT(*)
                FROM information_schema.table_constraints
                WHERE table_schema = DATABASE()
                AND table_name = 'api_employeerole'
                AND constraint_name = 'api_employeerole_employee_id_role_id_uniq'
            );
            SET @sql = IF(@constraint_exists = 0,
                'ALTER TABLE api_employeerole ADD CONSTRAINT api_employeerole_employee_id_role_id_uniq UNIQUE (employee_id, role_id)',
                'SELECT \"Constraint already exists\"'
            );
            PREPARE stmt FROM @sql;
            EXECUTE stmt;
            DEALLOCATE PREPARE stmt;
            """,
            # Reverse: drop the constraint if it exists
            reverse_sql="ALTER TABLE api_employeerole DROP CONSTRAINT IF EXISTS api_employeerole_employee_id_role_id_uniq"
        ),
    ]
