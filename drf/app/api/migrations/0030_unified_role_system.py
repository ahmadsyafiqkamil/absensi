# Generated by Django 5.0.2 on 2025-09-03 06:41

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('api', '0029_update_role_configuration_approval_level_choices'),
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        # Create new Role model
        migrations.CreateModel(
            name='Role',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Unique role identifier (e.g., "admin", "supervisor", "pegawai")', max_length=50, unique=True, verbose_name='Role Name')),
                ('display_name', models.CharField(help_text='Display name for UI (e.g., "Administrator", "Supervisor")', max_length=100, verbose_name='Display Name')),
                ('description', models.TextField(blank=True, help_text='Description of role responsibilities', null=True, verbose_name='Description')),
                ('approval_level', models.PositiveSmallIntegerField(choices=[(0, 'No Approval'), (1, 'Division Level'), (2, 'Organization Level')], default=0, help_text='Approval level for overtime and other requests', verbose_name='Approval Level')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this role is active and can be assigned', verbose_name='Is Active')),
                ('sort_order', models.PositiveIntegerField(default=0, help_text='Sort order for UI display', verbose_name='Sort Order')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Role',
                'verbose_name_plural': 'Roles',
                'ordering': ['sort_order', 'name'],
            },
        ),

        # Update EmployeeRole to use Role instead of Group
        migrations.AddField(
            model_name='employeerole',
            name='role',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='employee_assignments', to='api.role', verbose_name='Role'),
        ),

        # Data migration: Create Role records from RoleConfiguration
        migrations.RunPython(
            lambda apps, schema_editor: migrate_role_configurations_to_roles(apps, schema_editor),
            migrations.RunPython.noop
        ),

        # Data migration: Update EmployeeRole to use Role instead of Group
        migrations.RunPython(
            lambda apps, schema_editor: migrate_employee_roles_to_new_system(apps, schema_editor),
            migrations.RunPython.noop
        ),

        # Remove old fields and make role non-nullable
        migrations.AlterField(
            model_name='employeerole',
            name='role',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='employee_assignments', to='api.role', verbose_name='Role'),
        ),

        # Remove the old group field from EmployeeRole
        migrations.RemoveField(
            model_name='employeerole',
            name='group',
        ),

        # Delete RoleConfiguration model (no longer needed)
        migrations.DeleteModel(
            name='RoleConfiguration',
        ),
    ]


def migrate_role_configurations_to_roles(apps, schema_editor):
    """
    Migrate data from RoleConfiguration to new Role model
    """
    RoleConfiguration = apps.get_model('api', 'RoleConfiguration')
    Role = apps.get_model('api', 'Role')
    Group = apps.get_model('auth', 'Group')

    # Create Role records from RoleConfiguration
    for role_config in RoleConfiguration.objects.all():
        role, created = Role.objects.get_or_create(
            name=role_config.name,
            defaults={
                'display_name': role_config.display_name,
                'description': role_config.description,
                'approval_level': role_config.approval_level,
                'is_active': role_config.is_active,
                'sort_order': role_config.sort_order,
            }
        )

        # Ensure Django Group exists
        Group.objects.get_or_create(name=role_config.name)

    print(f"Migrated {RoleConfiguration.objects.count()} RoleConfiguration records to Role model")


def migrate_employee_roles_to_new_system(apps, schema_editor):
    """
    Update EmployeeRole records to use Role instead of Group
    """
    EmployeeRole = apps.get_model('api', 'EmployeeRole')
    Role = apps.get_model('api', 'Role')

    updated_count = 0
    for employee_role in EmployeeRole.objects.filter(role__isnull=True):
        try:
            # Find corresponding Role by name matching Group name
            role = Role.objects.get(name=employee_role.group.name)
            employee_role.role = role
            employee_role.save()
            updated_count += 1
        except Role.DoesNotExist:
            print(f"Warning: No Role found for group '{employee_role.group.name}'")

    print(f"Updated {updated_count} EmployeeRole records to use new Role system")
