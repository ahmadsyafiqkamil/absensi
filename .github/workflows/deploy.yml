name: Deploy to Production

on:
  push:
    branches: [ main, base-multi-role ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SERVER_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ secrets.SERVER_IP }} >> ~/.ssh/known_hosts

    - name: Deploy to server
      run: |
        # Copy files to server
        rsync -avz --exclude='.git' --exclude='node_modules' \
          -e "ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no" \
          . ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }}:/opt/absensi/

        # Run deployment commands on server
        ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
          cd /opt/absensi

          # Backup current deployment
          ./scripts/backup.sh

          # Pull latest changes (if using Git on server)
          # git pull origin main

          # Set proper permissions
          chmod +x docker-prod.sh scripts/*.sh

          # Deploy with Docker
          ./docker-prod.sh

          # Health checks
          sleep 30
          curl -f http://localhost:8000/health/ || exit 1
          curl -f http://localhost:3000 || exit 1

          echo "✅ Deployment successful!"
        EOF

    - name: Notify on failure
      if: failure()
      run: |
        echo "❌ Deployment failed!"
        # You can add Slack/Discord notification here
